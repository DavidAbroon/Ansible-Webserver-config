---
- name: Playbook to config web server files
  hosts: aws_djangoblog
  become: true
  vars:
    user: ubuntu
    django_blog_path: /home/ubuntu/django-blog/
    GITHUB_ACCESS_TOKEN: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          32616335366430663435633536663533303230646537393361663533353934366263636366326262
          3263643164313939613963623433303564343466666661630a393234646133393731613637333465
          30633763376236303766666363646366356131373933653761633532623634383431366563643030
          3936643831306562620a383235616532633633303433613263333466656235396636343334336535
          39636466316361633465333836663234346661313435306130306638393062353734303535323564
          3234643462646132653132323230636132356437363931343165
  tasks:
    - include_vars: ~/Documents/Ansible/roles/webservers/vars/main.yml
    - name: Check if SSH key is already present
      stat:
        path: "{{ KEY_PATH }}"
      register: key_stat_result

    - name: Generate SSH key for accessing GitHub
      command: "ssh-keygen -t rsa -f {{ KEY_PATH }} -N ''"
      when: not key_stat_result.stat.exists

    - name: Get key content
      command: "cat {{ KEY_PATH }}.pub"
      register: key_content

    - name: Check if known_host exists
      stat:
        path: "{{ KNOWN_HOSTS_PATH }}"
      register: known_hosts_stat

    - name: Create known_hosts if it doesn't exist
      file:
        path: "{{ KNOWN_HOSTS_PATH }}"
        state: touch
      when: not known_hosts_stat.stat.exists

    - name: Get the content of known hosts
      shell: "cat {{ KNOWN_HOSTS_PATH }} | grep github.com"
      register: host_stat
      failed_when: host_stat.rc > 1

    - name: Modify known hosts
      block:
      - name: Fetch GitHub public key
        command: ssh-keyscan -T 10 github.com
        register: keyscan

      - name: Add GitHub public key to ssh known_hosts
        lineinfile:
          path: "{{ KNOWN_HOSTS_PATH }}"
          create: yes
          line: "{{ item }}"
        with_items: '{{ keyscan.stdout_lines }}'
      when: host_stat.rc == 1

    - name: Add SSH public key to GitHub account
      uri:
        url: https://api.github.com/user/keys
        validate_certs: no
        method: POST
        body:
          title: "{{ KEY_TITLE }}"
          key: "{{ key_content.stdout }}"
        body_format: json
        headers:
          Content-Type: "application/json"
          Authorization: "token {{ GITHUB_ACCESS_TOKEN }}"
      register: task_log
      failed_when: task_log.content.find('key is already in use') == 0

    - name: Clone the repository
      shell: GIT_SSH_COMMAND="ssh -i {{ KEY_PATH }} -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" {{ GIT_EXECUTABLE }} clone {{ GIT_REPO }} {{ CLONE_DEST }}

    - name: Activate Virtualenv and install requirements
      pip:
        requirements: "{{ django_blog_path }}/requirements.txt"
        virtualenv: "{{ django_blog_path }}/venv"
        virtualenv_command: virtualenv

    - name: Get Public IP address and create file
      shell: |
        curl https://ipinfo.io/ip > /home/{{ user }}/publicip

    - name: Get content of Public IP address file (remote content)
      slurp:
        src: "/home/{{ user }}/publicip"
      register: publicip_encoded

    - name: decode remote content
      set_fact:
        remote_public_ip: "{{publicip_encoded.content | b64decode}}"

    - name: Add IP Address to known hosts in django settings.py
      become: true
      lineinfile:
        path: "{{ django_blog_path }}/david_portfolio/settings.py"
        regexp: "^ALLOWED_HOSTS."
        line: "ALLOWED_HOSTS = ('{{ remote_public_ip }}')"
        state: present

    - name: Copy .env file to webserver
      copy:
        src: ~/Documents/Ansible/templates/.env
        dest: "{{ django_blog_path }}/david_portfolio/.env"

    - name: Copy gunicorn.socket config file to webserver
      copy:
        src: ~/Documents/Ansible/templates/gunicorn.socket
        dest: /etc/systemd/system/gunicorn.sssocket

    - name: Copy gunicorn.service config file to webserver
      copy:
        src: ~/Documents/Ansible/templates/gunicorn.service
        dest: /etc/systemd/system/gunicorn.service

    - name: Start and Enable Gunicorn Service
      become: true
      shell: |
        systemctl start gunicorn.socket
        systemctl enable gunicorn.socket

    - name: Copy sites-available NGINX file to webserver
      copy:
        src: ~/Documents/Ansible/templates/sites-available
        dest: /etc/nginx/sites-available/david_portfolio

    - name: Restart Nginx
      become: true
      command: systemctl restart nginx
