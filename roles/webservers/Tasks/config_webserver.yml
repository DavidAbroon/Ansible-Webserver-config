---
- name: Playbook to config web server files
  hosts: aws_djangoblog
  become_method: sudo
  become_user: david_aws
  vars:
    user: david_aws
    PROJECT_PATH: /home/{{ user }}/django-blog/
    GIT_REPO: git@github.com:DavidAbroon/Django-blog.git
    GIT_BRANCH: main
    PROJECT_NAME: django-blog

  tasks:
    - name: Give write permissions for user directory
      become: true
      file:
        path: /home/{{ user }}
        owner: ubuntu
        mode: '0764'

    - name: Check if {{ PROJECT_PATH }} folder exists before attempting to clone in next task
      stat:
        path: /{{ PROJECT_PATH }}
      register: project_status

    - name: Clone a private repository into {{PROJECT_NAME}} folder.
      git:
        repo: "{{ GIT_REPO }}"
        version: "{{ GIT_BRANCH }}"
        dest: "/home/{{ user }}/{{ PROJECT_NAME }}"
        accept_hostkey: yes
      when: project_status.stat.islnk is not defined

    - name: Activate Virtualenv and install requirements
      pip:
        requirements: "{{ PROJECT_PATH }}/requirements.txt"
        virtualenv: "{{ PROJECT_PATH }}/venv"
        virtualenv_site_packages: true

    - name: Get Public IP address and create file
      shell: |
        curl https://ipinfo.io/ip > /home/{{ user }}/publicip

    - name: Get content of Public IP address file (remote content)
      slurp:
        src: "/home/{{ user }}/publicip"
      register: publicip_encoded

    - name: decode remote content
      set_fact:
        remote_public_ip: "{{publicip_encoded.content | b64decode}}"

    - name: Add IP Address to known hosts in django settings.py
      lineinfile:
        path: "{{ PROJECT_PATH }}/david_portfolio/settings.py"
        regexp: "^ALLOWED_HOSTS."
        line: "ALLOWED_HOSTS = ('{{ remote_public_ip }}')"
        state: present

    - name: Copy .env file to webserver
      copy:
        src: ~/Documents/Ansible/roles/webservers/templates/.env
        dest: "{{ PROJECT_PATH }}/david_portfolio/.env"

    - name: Copy gunicorn.socket config file to webserver
      copy:
        src: ~/Documents/Ansible/roles/webservers/templates/gunicorn.socket
        dest: /etc/systemd/system/gunicorn.socket

    - name: Copy gunicorn.service config file to webserver
      copy:
        src: ~/Documents/Ansible/roles/webservers/templates/gunicorn.service
        dest: /etc/systemd/system/gunicorn.service

    - name: Start and enable Gunicorn Service
      service:
        name: gunicorn
        enabled: true
        state: started

    - name: Copy sites-available NGINX file to webserver
      copy:
        src: ~/Documents/Ansible/roles/webservers/templates/sites-available
        dest: /etc/nginx/sites-available/david_portfolio

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
